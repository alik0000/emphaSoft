{"remainingRequest":"/home/alijon/pet-projects/test-on-vue-3/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/alijon/pet-projects/test-on-vue-3/src/components/Container.vue?vue&type=style&index=0&id=07b96b00&lang=scss&scoped=true","dependencies":[{"path":"/home/alijon/pet-projects/test-on-vue-3/src/components/Container.vue","mtime":1677358518960},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/css-loader/dist/cjs.js","mtime":1677358835777},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1677358836761},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/postcss-loader/src/index.js","mtime":1677358836494},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/sass-loader/dist/cjs.js","mtime":1677358782228},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/cache-loader/dist/cjs.js","mtime":1677358791790},{"path":"/home/alijon/pet-projects/test-on-vue-3/node_modules/vue-loader-v16/dist/index.js","mtime":1677358836761}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIkAvc2Nzcy9hcHAuc2NzcyI7CgouY29udGFpbmVyIHsKICBAaW5jbHVkZSBjb250YWluZXI7CgogIGRpc3BsYXk6IGJsb2NrOwogIG1hcmdpbjogMCBhdXRvOwogIHBhZGRpbmc6IDA7Cn0K"},{"version":3,"sources":["/home/alijon/pet-projects/test-on-vue-3/src/components/Container.vue"],"names":[],"mappings":";AA8DA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACZ","file":"/home/alijon/pet-projects/test-on-vue-3/src/components/Container.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"container\" :style=\"{ maxWidth }\">\n    <slot />\n  </div>\n</template>\n\n<script>\nimport config from \"../config\";\n\n/**\n * @name AppContainer\n * @description Application container\n */\nexport default {\n  name: \"Container\",\n\n  props: {\n    /**\n     * Container size. Can have: preset values (lg, md, sm),\n     * relative values (100%), absolute values (1000).\n     * The unit of measure for absolute values is pixels.\n     */\n    size: {\n      type: String,\n      default: config.container.default,\n    },\n  },\n\n  computed: {\n    /**\n     * Container size and gutters calculation.\n     * @return {string}\n     */\n\n    maxWidth() {\n      const { container, responsive } = config\n\n      const gutters = parseFloat(\n          container.gutters[responsive.viewport.size]\n      )\n      const size = ['lg', 'md', 'sm'].includes(this.size)\n          ? container[this.size]\n          : this.size\n      let realSize = parseFloat(size)\n\n      if (realSize + '' !== size) {\n        realSize = (realSize / 100) * responsive.viewport.width\n      }\n\n      const hasGutters = gutters + realSize >= responsive.viewport.width\n\n      if (hasGutters) {\n        return `calc(100% - ${gutters / 10}rem)`\n      } else {\n        return realSize / 10 + 'rem'\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/scss/app.scss\";\n\n.container {\n  @include container;\n\n  display: block;\n  margin: 0 auto;\n  padding: 0;\n}\n</style>"]}]}